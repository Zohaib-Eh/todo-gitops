name: Deploy To Do List App Front-End
on:
  push:
    branches:
    - main
  pull_request:
    branches: 
    - main
    
jobs: 
  frontend-test:
    name: Frontend Unit Test
    runs-on: ubuntu-22.04
    defaults:
      run:
        working-directory: frontend
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: 'frontend/package-lock.json'
        
      - name: Install Dependencies
        run: npm ci

      - name: Run unit tests
        run: npm test

  backend-test:
    name: Backend Unit Test
    runs-on: ubuntu-22.04
    defaults:
      run:
        working-directory: backend
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      
      - name: Run backend tests
        run: pytest -v
        
  docker-build-and-push:
    name: Build and Push Backend to ECR
    runs-on: ubuntu-22.04
    needs: [frontend-test, backend-test]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-1
  
      - name: Login to Amazon ECR
        run: |
          aws ecr get-login-password --region eu-west-1 | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.eu-west-1.amazonaws.com
  
      - name: Build and Tag Docker Image
        run: |
          IMAGE_NAME=todo-backend
          ECR_REGISTRY=${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.eu-west-1.amazonaws.com
          ECR_REPO=workshops/react-todo
          TAG=latest
  
          docker build -t $IMAGE_NAME ./backend
          docker tag $IMAGE_NAME:latest $ECR_REGISTRY/$ECR_REPO:$TAG
  
      - name: Push Docker Image to ECR
        run: |
          docker push $ECR_REGISTRY/$ECR_REPO:$TAG
    
  deploy:
    name: Deploy to S3
    needs: [frontend-test, backend-test]
    if: success() && github.ref == 'refs/heads/main'
    runs-on: ubuntu-22.04
    defaults:
      run:
        working-directory: frontend
    steps:
    -  uses: actions/checkout@v4
      
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
  
    -  name: Install Dependencies
       run: npm ci
  
    -  name: Build
       run: npm run build
       
    -  name: Deploy to S3
       run: |
         aws s3 sync dist/ s3://react-todo-workshop/ --delete
         aws s3 cp dist/ s3://react-todo-workshop/ --recursive --exclude "*" --include "*.js" --content-type "application/javascript" --metadata-directive REPLACE
         aws s3 cp dist/ s3://react-todo-workshop/ --recursive --exclude "*" --include "*.css" --content-type "text/css" --metadata-directive REPLACE
         aws s3 cp dist/ s3://react-todo-workshop/ --recursive --exclude "*" --include "*.html" --content-type "text/html" --metadata-directive REPLACE
         aws s3 cp dist/ s3://react-todo-workshop/ --recursive --exclude "*" --include "*.svg" --content-type "image/svg+xml" --metadata-directive REPLACE
         aws s3 cp dist/ s3://react-todo-workshop/ --recursive --exclude "*" --include "*.json" --content-type "application/json" --metadata-directive REPLACE
       env:
         AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
         AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
         AWS_REGION: eu-west-1
         AWS_EC2_METADATA_DISABLED: true
   
    -  name: Invalidate CloudFront cache
       run: aws cloudfront create-invalidation --distribution-id E179NKVJMRYRAL --paths "/*"
       env:
         AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
         AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
         AWS_REGION: eu-west-1
         AWS_EC2_METADATA_DISABLED: true
